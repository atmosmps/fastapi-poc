version: "3.3"
services:

  db:
    image: postgres:13
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
#    deploy:
#      placement:
#        constraints:
#          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  pgadmin:
    image: dpage/pgadmin4
    networks:
      - default
    depends_on:
      - db
    env_file:
      - .env
    ports:
      - "5050:5050"

  queue:
    image: rabbitmq:3
    # Using the below image instead is required to enable the "Broker" tab in the flower UI:
    # image: rabbitmq:3-management
    #
    # You also have to change the flower command
  
#  flower:
#    image: mher/flower
#    networks:
#      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#      - default
#    env_file:
#      - .env
#    command:
#      - "--broker=amqp://guest@queue:5672//"
#      # For the "Broker" tab to work in the flower UI, uncomment the following command argument,
#      # and change the queue service's image as well
#      # - "--broker_api=http://guest:guest@queue:15672/api//"
#    deploy:
#      labels:
#        - traefik.enable=true
#        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
#        - traefik.constraint-label=${TRAEFIK_PUBLIC_TAG?Variable not set}
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.entrypoints=http
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-http.middlewares=${STACK_NAME?Variable not set}-https-redirect
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.rule=Host(`flower.${DOMAIN?Variable not set}`)
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.entrypoints=https
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls=true
#        - traefik.http.routers.${STACK_NAME?Variable not set}-flower-https.tls.certresolver=le
#        - traefik.http.services.${STACK_NAME?Variable not set}-flower.loadbalancer.server.port=5555
#    ports:
#      - "5555:5555"

  backend:
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      # - SERVER_HOST=https://${DOMAIN?Variable not set}
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      # - SMTP_HOST=${SMTP_HOST}
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
    build:
      context: .
      dockerfile: backend.dockerfile
      args:
        #INSTALL_DEV: ${INSTALL_DEV-false}
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
#    deploy:
#      labels:
#        - traefik.enable=true
#        - traefik.constraint-label-stack=${TRAEFIK_TAG?Variable not set}
#        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=PathPrefix(`/api`) || PathPrefix(`/docs`) || PathPrefix(`/redoc`)
#        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80

    # command: bash -c "while true; do sleep 1; done"  # Infinite loop to keep container live doing nothing
    command: /start-reload.sh
    ports:
      - "8888:8888"
      - "80:80"
      - "8090:8080"
    volumes:
      - .:/app

  celeryworker:
    image: '${DOCKER_IMAGE_CELERYWORKER?Variable not set}:${TAG-latest}'
    depends_on:
      - db
      - queue
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      - RUN=celery worker -A app.worker -l info -Q main-queue -c 1
      - JUPYTER=jupyter lab --ip=0.0.0.0 --allow-root --NotebookApp.custom_display_url=http://127.0.0.1:8888
      - SERVER_HOST=http://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST?Variable not set}
    build:
      context: .
      dockerfile: celeryworker.dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
        INSTALL_JUPYTER: ${INSTALL_JUPYTER-true}
    volumes:
      - .:/app

volumes:
  app-db-data:
